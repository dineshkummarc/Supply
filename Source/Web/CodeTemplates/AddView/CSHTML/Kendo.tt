<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#
MvcTextTemplateHost mvcHost = (MvcTextTemplateHost)(Host);
#>
@model <#= mvcHost.ViewDataTypeName #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.
if(mvcHost.IsPartialView) {
#>

<#
} else if(mvcHost.IsContentPage) {
#>

@{
    ViewBag.Title = "<#= mvcHost.ViewName#>";
<#
if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {
#>
    Layout = "<#= mvcHost.MasterPageFile#>";
<#
}
#>
}

<h2><#= mvcHost.ViewName#></h2>

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <title><#= mvcHost.ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>

    <h2><#= mvcHost.ViewDataType.Name #></h2>
	
	
	
	
<div id="grid"></div>

<#
foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) { 
	if(false){
#>

    <div class="display-label">name:			<#= property.Name #></div>
    <div class="display-field">ValueExpression:	<#= property.ValueExpression #></div>
    <div class="display-field">UnderlyingType:	<#= property.UnderlyingType #></div>
    <div class="display-field">JavascriptType:	<#= property.JavascriptType #></div>
    <div class="display-field">IsPrimaryKey:	<#= property.IsPrimaryKey #></div>
    <div class="display-field">IsReadOnly:		<#= property.IsReadOnly #></div> 
    <div class="display-field">TableOptions:	<#= property.TableOptions #></div> 
	  
	<br /><br />
	
<# 
	}
}
#>

	
	 
	
<script type="text/javascript">

    var dateRegExp = /^\/Date\((.*?)\)\/$/;

    function toDate(value) {
        var date = dateRegExp.exec(value);
        return new Date(parseInt(date[1]));
    }

    $(document).ready(function () {
        var url = '@Url.Action("Grid")';

        var dataSource = new kendo.data.DataSource({
            serverPaging: true,
            serverSorting: true,
            serverFiltering: true,
            pageSize: 20,
            transport: {
                read: {
                    type: 'post',
                    dataType: 'json',
                    url: url
                },
                // annyoing work-around for adding date types to the request
                parameterMap: function (options) {
                    if (options.filter) {
                        options.filter.filters[0].value = kendo.toString(options.filter.filters[0].value, "MM/dd/yyyy");
                    }
                    return options;
                }
            },
            schema: {
                data: 'data',
                total: 'total',
                model: {
                    id: 'ID',
                    fields: {
					
				
<#
foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) { 
#> 
                        <#= property.Name #>: { type: '<#= property.JavascriptType #>' }, 
<# 
}
#> 
                    }
                }
            }
        });

        $('#grid').kendoGrid({
            dataSource: dataSource,
            columns: [
				
<#
foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) { 
#> 
                { field: '<#= property.Name #>', title: '<#= property.Name #>'   <#= property.TableOptions #> },
<# 
}
#> 
            ],
            filterable: true,
            scrollable: false,
            sortable: {
                mode: 'multiple'
            },
            pageable: true
        });
    });
    

</script>


	
	
	
	
	
<#
if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>

<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string ValueExpression { get; set; }
    public Type UnderlyingType { get; set; }
    public string JavascriptType { get; set; } 
    public bool IsPrimaryKey { get; set; }
    public bool IsReadOnly { get; set; } 
    public string TableOptions { get; set; } 
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(Int32),
    typeof(int),
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type) {
    List<ModelProperty> results = GetEligibleProperties(type);
    
    foreach (ModelProperty prop in results) {
        if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {
            prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
        }
        else if (prop.UnderlyingType == typeof(DateTime)) {
            prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
        }
    }

    return results;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
    if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
            return true;
        }
        
        var edmScalar = attribute as EdmScalarPropertyAttribute;
        if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
            return true;
        }

        var column = attribute as ColumnAttribute;
        if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
            return true;
        }
    }
    
    return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
    IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
    return pkNames.Count() == 1 ? pkNames.First() : null;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
    return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

string GetJavascriptType(Type type)
{
	return type.ToString().Replace("System.","").Replace("DateTime","Date").ToLower();
}
string GetTableOptions(bool isPrimary, Type type)
{
	var r = "        "; 
	if ( type ==  typeof(System.DateTime))
	{
		r = @", template: '<div class=\'date nowrap\'> #= kendo.toString(toDate(UpdatedAt), \'MM/dd/yyyy HH:mm\')# </div>'";
	}
	else if (isPrimary)
	{
		r = @", template: '<a class=\'id nowrap\' href=\'/details/#= kendo.toString(Id)#\'> details </a>', sortable: false, filterable: false";
	} 	
	return r;
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {
            results.Add(new ModelProperty {
                Name = prop.Name,
                ValueExpression = "Model." + prop.Name,
                UnderlyingType = underlyingType,
                TableOptions = GetTableOptions(IsPrimaryKey(prop), underlyingType),
				JavascriptType = GetJavascriptType(underlyingType),
                IsPrimaryKey = IsPrimaryKey(prop),
                IsReadOnly = prop.GetSetMethod() == null
            });
        }
    }

    return results;
}

// Helper
bool IsBindableType(Type type) {
    return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}
#>